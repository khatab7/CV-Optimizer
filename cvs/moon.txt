Todo App Project Documentation
Introduction of Team Members
Team Members and Roles

    Alice Johnson - Project Manager
        Role: Oversees the project development, coordinates between team members, and ensures that milestones are met on time. Alice also handles communication with stakeholders and manages project documentation.

    Bob Smith - Lead Developer
        Role: Responsible for designing the app's architecture and implementing core features. Bob led the development of the Flutter UI and integrated the API endpoints.

    Carol Lee - Backend Developer
        Role: Focused on the implementation of API endpoints and ensuring proper data handling between the client and server. Carol worked on setting up the JSONPlaceholder integration and managed error handling.

    David Brown - UI/UX Designer
        Role: Designed the app's user interface and user experience. David created wireframes, mockups, and ensured that the app is user-friendly and visually appealing.

    Eve Davis - Quality Assurance (QA) Specialist
        Role: Conducted testing and quality assurance for the app. Eve was responsible for identifying bugs, ensuring app stability, and verifying that all features function as intended.

Story of Inspiration

The Todo App project was inspired by a desire to create a simple, yet functional task management tool that can be used for personal productivity. The team was motivated by the need to build a practical application that demonstrates essential CRUD (Create, Read, Update, Delete) operations using a modern technology stack. The inspiration also came from the popularity of task management apps and the opportunity to explore the capabilities of Flutter for creating a responsive and cross-platform mobile application.
Technology & Architecture
Technologies Used

    Flutter: An open-source UI toolkit by Google for building natively compiled applications for mobile, web, and desktop from a single codebase.
    Dart: The programming language used by Flutter to write the application code.
    JSONPlaceholder: A free online REST API used for testing and prototyping, providing endpoints for CRUD operations.
    Visual Studio Code: The integrated development environment (IDE) used for coding and debugging.

Architecture

The app follows a client-server architecture with the following key components:

    Client Side:
        Flutter UI: Developed using Flutter, it includes components for displaying and interacting with todos.
        Model Layer: The Todo class handles data representation and JSON serialization/deserialization.

    Server Side:
        JSONPlaceholder API: Provides endpoints for CRUD operations. This serves as a mock backend, allowing interaction with a simulated server.

    State Management: Managed within Flutter using StatefulWidget to handle the dynamic state of the todo list and user interactions.

Core Algorithms and Code Snippets
Core Algorithms

    Fetching Todos: Retrieves a list of todos from the API.
    Creating a Todo: Sends a POST request to add a new todo.
    Updating a Todo: Sends a PUT request to modify an existing todo.
    Deleting a Todo: Sends a DELETE request to remove a todo.

Code Snippets
Fetching Todos

dart

Future<List<Todo>> fetchTodos() async {
  final response = await http.get(
    Uri.parse('https://jsonplaceholder.typicode.com/todos'),
  );

  if (response.statusCode == 200) {
    Iterable todoMap = jsonDecode(response.body);
    return List<Todo>.from(todoMap.map((e) => Todo.fromJson(e)));
  } else {
    throw Exception('Failed to load todos');
  }
}

Creating a Todo

dart

Future<Todo> createTodo(Todo todo) async {
  final response = await http.post(
    Uri.parse('https://jsonplaceholder.typicode.com/todos'),
    headers: <String, String>{
      'Content-Type': 'application/json; charset=UTF-8',
    },
    body: jsonEncode(<String, dynamic>{
      'title': todo.title,
      'userId': todo.userId,
      'completed': todo.completed,
    }),
  );

  if (response.statusCode == 201) {
    return Todo.fromJson(jsonDecode(response.body));
  } else {
    throw Exception('Failed to create todo.');
  }
}

Discussion of Process, Collaboration, and Timeline
Process

The development process followed an Agile methodology with iterative sprints. The team began with a planning phase to outline the project scope, followed by designing, implementing, and testing phases. Regular stand-up meetings ensured that everyone was aligned and any blockers were addressed promptly.
Collaboration

The team used tools like GitHub for version control and issue tracking, and Slack for communication. Weekly meetings were held to discuss progress and review the work done. Each member contributed according to their role, ensuring that all aspects of the project were covered effectively.
Timeline

    Week 1: Project planning and setup.
    Week 2: UI/UX design and initial development.
    Week 3: API integration and core feature implementation.
    Week 4: Testing, bug fixing, and final adjustments.
    Week 5: Deployment and project wrap-up.

Challenges Overcome

    API Integration Issues: Initially, there were difficulties in handling API responses and managing asynchronous operations. This was resolved by improving error handling and thoroughly testing API interactions.

    State Management: Managing the state of the application dynamically, especially during CRUD operations, was challenging. The team adopted best practices for state management in Flutter to ensure a smooth user experience.

    UI/UX Consistency: Ensuring a consistent and intuitive UI/UX across different devices required extensive testing and iterations. The team worked closely to refine the design and address user feedback.

    Performance Optimization: Optimizing the app to handle a large number of todos efficiently required profiling and adjusting performance bottlenecks.

Learnings About Technical Interests

The project provided valuable insights into:

    Flutter Development: Gained hands-on experience with Flutter, enhancing skills in building responsive and high-performance mobile applications.
    API Integration: Improved understanding of integrating RESTful APIs with client applications, focusing on handling asynchronous data.
    UI/UX Design: Learned the importance of creating user-friendly and visually appealing interfaces.

Overall, the project deepened the teamâ€™s knowledge of mobile app development and highlighted the importance of effective collaboration and iterative development.
